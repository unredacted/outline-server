name: Build and Push Shadowbox Docker Image

on:
  push:
    branches:
      - '**'  # Build on push to any branch
    paths:
      - 'src/shadowbox/**'
      - '.github/workflows/build-shadowbox.yml'
  pull_request:
    paths:
      - 'src/shadowbox/**'
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Tag suffix for the Docker image (e.g., "wss-test")'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: outline/shadowbox

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Install task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch name
            type=ref,event=branch
            # Tag name
            type=ref,event=tag
            # PR number
            type=ref,event=pr
            # Latest tag for main/master branch
            type=raw,value=latest,enable={{is_default_branch}}
            # SHA short
            type=sha,prefix={{branch}}-
            # Custom suffix if provided
            type=raw,value={{branch}}-${{ github.event.inputs.tag_suffix }},enable=${{ github.event.inputs.tag_suffix != '' }}
            # WSS-specific tags
            type=raw,value=wss-latest,enable=${{ startsWith(github.ref, 'refs/heads/wss-') }}
            type=raw,value=wss-{{branch}},enable=${{ startsWith(github.ref, 'refs/heads/wss-') }}
      
      - name: Build application for x86_64
        working-directory: ./src/shadowbox
        run: |
          npm ci
          task docker:build VERSION=${{ github.sha }} TARGET_ARCH=x86_64
          
      - name: Build application for arm64
        working-directory: ./src/shadowbox
        run: |
          task docker:build VERSION=${{ github.sha }} TARGET_ARCH=arm64
      
      - name: Create multi-arch image and push
        if: github.event_name != 'pull_request'
        run: |
          # Tag images for each architecture
          docker tag localhost/outline/shadowbox:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64-temp
          
          # Since we built x86_64 last, we need to load the arm64 image
          docker load -i ./src/shadowbox/build/arm64/shadowbox-arm64.tar || true
          docker tag localhost/outline/shadowbox:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64-temp
          
          # Push architecture-specific images
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64-temp
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64-temp
          
          # Create and push manifests for each tag
          TAGS="${{ steps.meta.outputs.tags }}"
          IFS=$'\n'
          for TAG in $TAGS; do
            echo "Creating manifest for $TAG"
            docker manifest create $TAG \
              --amend ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64-temp \
              --amend ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64-temp
            
            docker manifest annotate $TAG \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64-temp \
              --arch amd64 --os linux
              
            docker manifest annotate $TAG \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64-temp \
              --arch arm64 --os linux
              
            docker manifest push $TAG
          done
          
          # Clean up temporary tags
          docker manifest rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64-temp || true
          docker manifest rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64-temp || true