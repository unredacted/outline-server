name: Build and Push Shadowbox Docker Image

on:
  push:
    branches:
      - '**'  # Build on push to any branch
    paths:
      - 'src/shadowbox/**'
      - '.github/workflows/build-shadowbox.yml'
  pull_request:
    paths:
      - 'src/shadowbox/**'
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Tag suffix for the Docker image (e.g., "wss-test")'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: outline/shadowbox

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch name
            type=ref,event=branch
            # Tag name
            type=ref,event=tag
            # PR number
            type=ref,event=pr
            # Latest tag for main/master branch
            type=raw,value=latest,enable={{is_default_branch}}
            # SHA short
            type=sha,prefix={{branch}}-
            # Custom suffix if provided
            type=raw,value={{branch}}-${{ github.event.inputs.tag_suffix }},enable=${{ github.event.inputs.tag_suffix != '' }}
            # WSS-specific tags
            type=raw,value=wss-latest,enable=${{ startsWith(github.ref, 'refs/heads/wss-') }}
            type=raw,value=wss-{{branch}},enable=${{ startsWith(github.ref, 'refs/heads/wss-') }}
      
      - name: Determine target architecture
        id: arch
        run: |
          if [[ "${{ matrix.platform }}" == "linux/amd64" ]]; then
            echo "node_image=node@sha256:a0b787b0d53feacfa6d606fb555e0dbfebab30573277f1fe25148b05b66fa097" >> $GITHUB_OUTPUT
            echo "target_arch=x86_64" >> $GITHUB_OUTPUT
          else
            echo "node_image=node@sha256:b4b7a1dd149c65ee6025956ac065a843b4409a62068bd2b0cbafbb30ca2fab3b" >> $GITHUB_OUTPUT
            echo "target_arch=arm64" >> $GITHUB_OUTPUT
          fi
      
      - name: Build application
        working-directory: ./src/shadowbox
        run: |
          # Install Node.js
          curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Install dependencies and build
          npm ci
          npm run action:build -- \
            --platform ${{ matrix.platform == 'linux/amd64' && 'linux' || 'linux' }}
      
      - name: Prepare Docker build context
        working-directory: ./src/shadowbox
        run: |
          # Create image root directory
          IMAGE_ROOT="build/image_root"
          rm -rf "${IMAGE_ROOT}"
          mkdir -p "${IMAGE_ROOT}/opt/outline-server"
          
          # Copy built application
          cp -R build/linux/${{ steps.arch.outputs.target_arch }}/* "${IMAGE_ROOT}/opt/outline-server/"
          
          # Copy scripts
          cp -R scripts "${IMAGE_ROOT}/scripts"
          cp -R docker/* "${IMAGE_ROOT}/"
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/shadowbox/build/image_root
          file: ./src/shadowbox/build/image_root/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_IMAGE=${{ steps.arch.outputs.node_image }}
            VERSION=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            type=raw,value={{branch}}-${{ github.event.inputs.tag_suffix }},enable=${{ github.event.inputs.tag_suffix != '' }}
            type=raw,value=wss-latest,enable=${{ startsWith(github.ref, 'refs/heads/wss-') }}
            type=raw,value=wss-{{branch}},enable=${{ startsWith(github.ref, 'refs/heads/wss-') }}
      
      - name: Create and push manifest
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          for TAG in $TAGS; do
            docker manifest create $TAG \
              $TAG-linux-amd64 \
              $TAG-linux-arm64
            docker manifest push $TAG
          done